import eel
import os
import json
import subprocess
import urllib.request
import requests
import zipfile
import shutil
import threading
import tkinter as tk
from ctypes import windll

eel.init('web')

# root = tk.Tk()
# root.withdraw()
# icon_path = os.path.abspath("icon.ico")

# # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —ñ–∫–æ–Ω–∫–∞
# if os.path.exists(icon_path):
#     root.iconbitmap(icon_path)  # –Ü–∫–æ–Ω–∫–∞ –¥–ª—è Tkinter
#     windll.shell32.SetCurrentProcessExplicitAppUserModelID("mycompany.myapp") 

VERSION = "1.21.4"
FABRIC_LOADER = "0.16.10"
MINECRAFT_DIR = os.path.abspath(".")
VERSIONS_DIR = os.path.join(MINECRAFT_DIR, "versions")
LIBRARIES_DIR = os.path.join(MINECRAFT_DIR, "libraries")

JAVA_URL = "https://api.adoptium.net/v3/binary/latest/21/ga/windows/x64/jdk/hotspot/normal/eclipse?project=jdk"
JAVA_DIR = os.path.join(os.getcwd(), "jdk")  # –ö—É–¥–∏ —Ä–æ–∑–ø–∞–∫–æ–≤—É–≤–∞—Ç–∏ JDK

def get_java_path():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —à–ª—è—Ö –¥–æ Java, —è–∫—â–æ –≤–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."""
    java_path = shutil.which("java")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PATH, —è–∫—â–æ java –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –Ω–∞—à—ñ–π —Ç–µ—Ü—ñ JDK
    if not java_path:
        potential_java = os.path.join(JAVA_DIR, "jdk-21.0.6+7", "bin", "java.exe")
        if os.path.exists(potential_java):
            return potential_java
        return None
    return java_path

@eel.expose
def is_java_installed():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ Java —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î."""
    java_path = get_java_path()

    if not java_path:
        print("‚ùå Java –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É PATH.")
        return False

    try:
        result = subprocess.run(
            [java_path, "-version"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        output = result.stdout.strip() + result.stderr.strip()
        if "version" in output and "21" in output:
            add_log(f"‚úÖ Java –∑–Ω–∞–π–¥–µ–Ω–æ: {java_path}")
            add_log(f"üìå –í–µ—Ä—Å—ñ—è: {output.splitlines()[0]}")
            return True
        else:
            add_log("‚ö†Ô∏è Java —î, –∞–ª–µ –≤–µ—Ä—Å—ñ—è –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å!")
            add_log(f"üîç –í–∏–≤—ñ–¥: {output}")
            return False

    except FileNotFoundError:
        add_log("‚ùå Java –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False

@eel.expose
def check_and_install_java():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î Java –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –≤—ñ–∫–Ω–∞."""
    if is_java_installed():
        add_log("‚úÖ Java –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ñ –ø—Ä–∞—Ü—é—î.")
        eel.updateJavaStatus(True)
        return
        
    eel.updateJavaStatus(False)
    add_log("‚ö†Ô∏è Java –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ OpenJDK...")
    download_and_extract_java()
    
    if is_java_installed():
        add_log("‚úÖ Java —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        eel.updateJavaStatus(True)
    else:
        add_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Java!")
        eel.updateJavaStatus(False)

def download_and_extract_java():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è OpenJDK."""
    java_zip = "java.zip"

    add_log(f"[INFO] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è OpenJDK –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {JAVA_URL}")

    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(JAVA_URL, headers=headers, stream=True)

    if response.status_code != 200:
        add_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JDK: {response.status_code} {response.reason}")
        return

    with open(java_zip, "wb") as f:
        for chunk in response.iter_content(chunk_size=8192):
            if chunk:
                f.write(chunk)
    add_log("[INFO] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")

    add_log("[INFO] –†–æ–∑–ø–∞–∫–æ–≤–∫–∞ OpenJDK...")
    with zipfile.ZipFile(java_zip, "r") as zip_ref:
        zip_ref.extractall(JAVA_DIR)
    os.remove(java_zip)
    add_log(f"[INFO] OpenJDK —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ —É: {JAVA_DIR}")

    # –ü–æ—à—É–∫ –ø—ñ–¥–ø–∞–ø–∫–∏ jdk-*
    jdk_subdir = next((name for name in os.listdir(JAVA_DIR) if name.startswith("jdk")), None)

    if not jdk_subdir:
        add_log("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥–ø–∞–ø–∫—É JDK —É:", JAVA_DIR)
        return

    java_bin = os.path.join(JAVA_DIR, jdk_subdir, "bin")
    os.environ["PATH"] = java_bin + os.pathsep + os.environ["PATH"]
    add_log(f"‚úÖ Java –¥–æ–¥–∞–Ω–æ –≤ PATH: {java_bin}")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
@eel.expose
def add_log(message):
    print(message)  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
    eel.update_log(message)  # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ JS

# URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É —Ñ–∞–π–ª—ñ–≤ –∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
repo_url = "https://api.github.com/repos/Reiclid/HohloLauncher/contents/{folder}?ref=lib-msr"

def download_file(url, save_path):
    os.makedirs(os.path.dirname(save_path), exist_ok=True)  # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–∞–ø–∫–∏
    response = requests.get(url)
    with open(save_path, 'wb') as f:
        f.write(response.content)
    add_log(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {save_path}")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥


def download_folder(folder):
    folder_url = repo_url.format(folder=folder)
    response = requests.get(folder_url)
    
    if response.status_code == 200:
        files = response.json()
        for file in files:
            if file['type'] == 'file':
                target = os.path.join(folder, file['name'])
                if os.path.exists(target):
                    add_log(f"{target} –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                else:
                    download_file(file['download_url'], target)
            else:
                add_log(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {file['name']} (–Ω–µ —Ñ–∞–π–ª).")
    else:
        add_log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–º—ñ—Å—Ç—É –¥–ª—è {folder}: {response.status_code}")

def ensure_minecraft_version():
    version_manifest_path = os.path.join(MINECRAFT_DIR, "version_manifest_v2.json")
    with open(version_manifest_path, "r") as f:
        version_manifest = json.load(f)

    version_data = next(v for v in version_manifest["versions"] if v["id"] == VERSION)
    version_url = version_data["url"]

    add_log(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é: {version_url}")
    os.makedirs(os.path.join(VERSIONS_DIR, VERSION), exist_ok=True)
    urllib.request.urlretrieve(version_url, f"{VERSIONS_DIR}/{VERSION}/{VERSION}.json")

    with open(f"{VERSIONS_DIR}/{VERSION}/{VERSION}.json") as f:
        version_detail = json.load(f)

    client_url = version_detail["downloads"]["client"]["url"]
    download_file(client_url, f"{VERSIONS_DIR}/{VERSION}/{VERSION}.jar")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
    for lib in version_detail["libraries"]:
        artifact = lib.get("downloads", {}).get("artifact")
        if artifact:
            lib_path = os.path.join(LIBRARIES_DIR, artifact["path"])
            if not os.path.exists(lib_path):
                download_file(artifact["url"], lib_path)

def ensure_fabric_version():
    fabric_version_name = f"fabric-loader-{FABRIC_LOADER}-{VERSION}"
    fabric_profile_path = os.path.join(VERSIONS_DIR, fabric_version_name, f"{fabric_version_name}.json")
    
    if not os.path.exists(fabric_profile_path):
        add_log("‚öôÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Fabric Loader...")
        fabric_meta_url = f"https://meta.fabricmc.net/v2/versions/loader/{VERSION}/{FABRIC_LOADER}/profile/json"
        with urllib.request.urlopen(fabric_meta_url) as response:
            fabric_meta = json.loads(response.read().decode())

        os.makedirs(os.path.join(VERSIONS_DIR, fabric_version_name), exist_ok=True)
        with open(fabric_profile_path, "w") as f:
            json.dump(fabric_meta, f, indent=4)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
        for lib in fabric_meta["libraries"]:
            artifact = lib.get("downloads", {}).get("artifact")
            if artifact:
                lib_path = os.path.join(LIBRARIES_DIR, artifact["path"])
                if not os.path.exists(lib_path):
                    download_file(artifact["url"], lib_path)

    return fabric_version_name, fabric_profile_path  # –Ü–º'—è –≤–µ—Ä—Å—ñ—ó —ñ —à–ª—è—Ö –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é



@eel.expose
def start_game(username):
    try:

        add_log("–ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏...")

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ GitHub —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏
        directories = ["mods", "resourcepacks", "shaderpacks"]
        for folder in directories:
            if not os.path.exists(folder):
                os.makedirs(folder)
            download_folder(folder)

        config = {
            "server_ip": "play.example.com",
            "server_port": "25565"
        }
        with open('config.json', 'w') as f:
            json.dump(config, f)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Minecraft —Ç–∞ Fabric
        mc_jar_path = os.path.join(VERSIONS_DIR, VERSION, f"{VERSION}.jar")
        if not os.path.exists(mc_jar_path):
            ensure_minecraft_version()

        fabric_version_name, fabric_profile_path = ensure_fabric_version()

        # –ó–±—ñ—Ä –±—ñ–±–ª—ñ–æ—Ç–µ–∫
        all_libs = {}
        for root, _, files in os.walk(LIBRARIES_DIR):
            for file in files:
                if file.endswith(".jar"):
                    name = file.rsplit("-", 1)[0]
                    version = file.rsplit("-", 1)[1].replace(".jar", "")
                    if name not in all_libs or version > all_libs[name][1]:
                        all_libs[name] = (os.path.join(root, file), version)

        libs = [item[0] for item in all_libs.values()]
        libs.append(mc_jar_path)  # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ Minecraft .jar

        # Classpath
        classpath = ";".join(libs)

        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –∑ –ø—Ä–æ—Ñ—ñ–ª—é Fabric
        with open(fabric_profile_path, "r") as f:
            fabric_profile = json.load(f)
        main_class = fabric_profile["mainClass"]  # —Ü–µ net.fabricmc.loader.impl.launch.knot.KnotClient

        # JVM —Ç–∞ Minecraft –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        JVM_ARGS = [
            "-Xmx8G", "-Xms2G",
            "-cp", classpath,
            "-Dlog4j2.formatMsgNoLookups=true",  # ‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ª–æ–≥—ñ–≤
            "-Dlog4j.configurationFile=log4j2.xml",  # –î–æ–¥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é log4j, —è–∫—â–æ —É —Ç–µ–±–µ —î —Ç–∞–∫–∏–π —Ñ–∞–π–ª
            "-Dlog4j2.level=ERROR"  # –ó–º–µ–Ω—à—É—î —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
        ]
        MC_ARGS = [
            main_class,
            "--username", username,
            "--version", fabric_version_name,
            "--gameDir", MINECRAFT_DIR,
            "--assetsDir", os.path.join(MINECRAFT_DIR, "assets"),
            "--assetIndex", "1.21",
            "--accessToken", "0",
            "--uuid", "0",
            "--userType", "legacy",
            "--quickPlayMultiplayer", "51.195.61.129:25614"  # ‚úÖ –ê–≤—Ç–æ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        ]

        JVM_ARGS.append("-Dlog4j2.formatMsgNoLookups=true")
        MC_ARGS.append("--nogui")


        # –û—Å—Ç–∞—Ç–æ—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        ARGS = ["java"] + JVM_ARGS + MC_ARGS

        add_log(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫—É: {' '.join(ARGS)}")

        subprocess.Popen(ARGS, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, creationflags=subprocess.CREATE_NO_WINDOW)

        add_log(f"‚úÖ –ì—Ä–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —è–∫ {username}!")

    except Exception as e:
        add_log(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

# üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ GUI –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
eel.start('index.html', size=(1100, 700), block=False)

# ‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É Java —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
threading.Thread(target=check_and_install_java, daemon=True).start()

# üéâ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª (—â–æ–± Python –Ω–µ –∑–∞–∫—ñ–Ω—á—É–≤–∞–≤—Å—è)
while True:
    eel.sleep(1)